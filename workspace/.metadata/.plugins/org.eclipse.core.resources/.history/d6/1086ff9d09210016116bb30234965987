/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.KeyStroke;

public class KeybindingController {
    GUI window = null;

    private int leftThrottle = 400;

    private static final int SPEED_INCREMENT = 5;

    private static char leftAccel = 'q';
    private static char leftDecel = 'a';

    public KeybindingController(GUI window)
    {
        this.window = window;
    }

    public void bindKeys()
    {
        //set input maps so that the program can read key bindings
        //putting something in the input map means to assign a key to an action name
        //action name is associated with a method in the action map
        window.btnLeftAccel.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(leftAccel), "accelerateLeft");
        window.btnLeftAccel.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(Character.toUpperCase(leftAccel)), "accelerateLeft");
        window.btnLeftAccel.getActionMap().put("accelerateLeft", accelerateLeft);

        window.btnLeftDecel.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(leftDecel), "decelerateLeft");
        window.btnLeftDecel.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(Character.toUpperCase(leftDecel)), "decelerateLeft");
        window.btnLeftDecel.getActionMap().put("decelerateLeft", decelerateLeft);
    }

    public void toggleControls()
    {
        if (window.communicator.getConnected() == true)
        {
            window.btnLeftAccel.setEnabled(true);
            window.btnLeftDecel.setEnabled(true);
            window.btnDisconnect.setEnabled(true);
            window.btnConnect.setEnabled(false);
            window.cboxPorts.setEnabled(false);
        }
        else
        {
            window.btnLeftAccel.setEnabled(false);
            window.btnLeftDecel.setEnabled(false);
            window.btnDisconnect.setEnabled(false);
            window.btnConnect.setEnabled(true);
            window.cboxPorts.setEnabled(true);
        }
    }

    //defining the action
    Action accelerateLeft = new AbstractAction()
    {
        public void actionPerformed(ActionEvent evt)
        {
            leftThrottle = accelerate(leftThrottle);
            updateLabels();
        }
    };

    Action decelerateLeft = new AbstractAction()
    {
        public void actionPerformed(ActionEvent evt)
        {
            leftThrottle = decelerate(leftThrottle);
            updateLabels();
        }
    };

    public void updateLabels()
    {
        window.lblLeft.setText(String.valueOf(leftThrottle));

        window.communicator.writeData(leftThrottle);
    }

    public int accelerate(int throttle)
    {
        if (throttle < 999)
        {
            throttle += SPEED_INCREMENT;
        }
        return throttle;
    }

    public int decelerate(int throttle)
    {
        if (throttle > 0)
        {
            throttle -= SPEED_INCREMENT;
        }
        return throttle;
    }

    final public int getLeftThrottle()
    {
        return leftThrottle;
    }

    public void setLeftThrottle(int value)
    {
        leftThrottle = value;
    }

}
